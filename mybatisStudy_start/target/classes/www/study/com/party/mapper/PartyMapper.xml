<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<!-- association : 1:N에서 N쪽의 정보를 조회할 때 1쪽의 정보도 함께 읽을 것임 -->

<mapper namespace="www.study.com.party.mapper.PartyMapper">
	<resultMap id="partyResultMap"
		type="www.study.com.party.model.PartyVO">
		<id property="id" column="id" />
		<result property="name" column="name" />
		<result property="birthDate" column="birth_date" />
		<collection property="listContactPoint"
			ofType="www.study.com.party.model.ContactPointVO">
			<id property="typeName" column="type_name" />
			<result property="contactPoint" column="contact_point" />
		</collection>
		<collection property="listHashTag" columnPrefix="ht_"
			resultMap="hashTagResultMap">
		</collection>
		<!-- 구분자 -->
		<discriminator javaType="String" column="party_type">
			<case value="PERSON" resultMap="personResultMap" />
			<case value="ORGANIZATION" resultMap="organizationResultMap" />
		</discriminator>
	</resultMap>

	<resultMap id="personResultMap"
		type="www.study.com.party.model.PersonVO" extends="partyResultMap">
		<result property="gender" column="gender" />
	</resultMap>
	<resultMap id="organizationResultMap"
		type="www.study.com.party.model.OrganizationVO" extends="partyResultMap">
		<result property="salesTot" column="sales_tot" />
	</resultMap>


	<resultMap id="hashTagResultMap"
		type="www.study.com.party.model.HashTagVO">
		<id property="id" column="id" />
		<result property="name" column="name" />
	</resultMap>

	<select id="getAll" resultMap="partyResultMap">
		select * from t_party
	</select>

	<select id="getAllWithContactPoint" resultMap="partyResultMap">
		select *
		from t_party p,
		t_contact_point cp
		where p.id = cp.id	<!-- 1:N 둘 사이의 
			연결 -->
	</select>

	<select id="getAllWithContactPointWithoutLoss"
		resultMap="partyResultMap">
		select *
		from t_party p
		left outer join t_contact_point cp on p.id = cp.id <!-- 1:N 둘 사이의 연결. 손실 없이 -->
	</select>

	<select id="getAllWithContactPointWithoutLossAndPersonalService"
		resultMap="partyResultMap">
		select p.*, cp.*, t.id ht_id, t.name ht_name
		from t_party p
		left outer join t_contact_point cp on p.id = cp.id <!-- 1:N 둘 사이의 연결. 손실 없이 -->
		left outer join m_party_hash_tag mt on p.id = mt.party_id
		left outer join t_hash_tag t on mt.tag_id = t.id
	</select>

	<select id="getAllPerson" resultMap="partyResultMap">
		select *
		from t_party
		where party_type = 'PERSON'
	</select>

	<insert id="insertPerson">
		<selectKey keyProperty="id" order="BEFORE" resultType="int">
			select seq4party.nextval from dual
		</selectKey>
		insert into t_party(id, name, birth_date, party_type, gender)
			values(#{id}, #{name}, #{birthDate}, 'PERSON', #{gender})
	</insert>

	<!-- 한 사람에 대한 연락처가 10개 만들어 진다면 10번 돌아간다 : 결론은 느려터짐! 성능 나쁨! -->
	<insert id="insertContactPoint">
		insert into t_contact_point(id, type_name, contact_point)
			values(#{partyId}, #{typeName}, #{contactPoint})
	</insert>

	<insert id="insertContactPointByOneshot">
		INSERT ALL
		<foreach item="cp" collection="listcp" separator=" ">
			INTO t_contact_point(id, type_name, contact_point)
			values(#{cp.partyId}, #{cp.typeName}, #{cp.contactPoint})
		</foreach>
		SELECT * FROM DUAL
	</insert>
	
</mapper>