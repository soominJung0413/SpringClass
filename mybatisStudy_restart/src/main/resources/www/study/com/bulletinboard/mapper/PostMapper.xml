<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<!-- association : 1:N에서 N쪽의 정보를 조회할 때 1쪽의 정보도 함께 읽을 것임 -->

<mapper namespace="www.study.com.bulletinboard.mapper.PostMapper">
	<!-- public PostVO findPostWithWriter(@Param("postId")String postId); -->
	<resultMap type="www.study.com.bulletinboard.model.ReplyVO" id="replyResultMap">
		<id property="hierarchy_id" column="hierarchyId"  javaType="java.lang.String"/>
		<result property="content" column="content"/>
		<result property="regDate" column="reg_date"/>
		<result property="updateDate" column="update_date"/>
		<!-- 맵퍼 풀네임.리절트맵 이름 -->
		<association property="writer" columnPrefix="m_" resultMap="www.study.com.party.mapper.PartyMapper.partyResultMap"/>
		<discriminator column="post_type" javaType="String">
			<case value="POST">
				<association property="board" resultMap="postResultMap"/>
			</case>
		</discriminator>
	</resultMap>
	
	<resultMap type="www.study.com.bulletinboard.model.PostVO" id="postResultMap" extends="replyResultMap">
		<result property="title" column="title"/>
		<association property="board" resultMap="bulletinBoardResultMap"/>
	</resultMap>
	
	<resultMap type="www.study.com.bulletinboard.model.BulletinBoardVO" id="bulletinBoardResultMap">
		<id column="id" javaType="Long" property="id"/>
		<result column="name" javaType="String"/>
	</resultMap>
	
	<!-- public PostVO findPostWithWriter(@Param("postId")String postId); -->
	<select id="findPostWithWriter" resultMap="replyResultMap">
		select t_post.*,  t_party.login_id as m_login_id, t_party.pwd as m_pwd, t_party.name m_name, t_party.birth_date m_birth_date, t_party.join_date m_join_date
		, t_party.party_type m_party_type, t_party.gender m_gender, t_party.is_alive m_is_alive,
		t_bulletin_board.*
		   from t_post
		     left outer join t_party
		     	on  t_party.login_id = t_post.writer_id
				left outer join t_bulletin_board
				on t_bulletin_board.id = t_post.bb_id
	</select>
	
	<!-- public PostVO findSomeByTableName(@Param("tableName") String tableName, @Param("postId") String postId); -->
	<!-- 테이블 이름을 매개변수로 주면 '' 처리가 되므로 ''를 제거해야함 -->
	<!-- <select id="findSomeByTableName" resultMap="replyResultMap">
		select t_post.*,  t_party.login_id as m_login_id, t_party.pwd as m_pwd, t_party.name m_name, t_party.birth_date m_birth_date, t_party.join_date m_join_date
		, t_party.party_type m_party_type, t_party.gender m_gender, t_party.is_alive m_is_alive,
		t_bulletin_board.*
		   from #{tableName}
		     left outer join t_party
		     	on  t_party.login_id = t_post.writer_id
				left outer join t_bulletin_board
				on t_bulletin_board.id = t_post.bb_id
				where t_post.hierarchy_id = #{}
	</select> -->
	<!-- public List<PostVO> searchPost(@Param("arrUserSearch") String[] arrUserSearch); -->
			<select id="searchPost" resultMap="replyResultMap">
				select p.*, t.login_id as m_login_id, t.pwd as m_pwd, t.name as m_name, t.birth_date as m_birth_date, t.join_date as m_join_date,
						t.party_type as m_party_type, t.gender as m_gender, t.is_alive as m_is_alive
					  from m_post2tag m, t_post p, t_party t
					where m.tag_id in
							(
							select id 
							     from t_hashtag
							where tag in (
								<foreach collection="arrUserSearch" separator="," item="searchWord" >
									#{searchWord, jdbcType=VARCHAR}
								</foreach>
												)
							  )
					  and m.post_id = p.hierarchy_id
					  and t.login_id = p.writer_id
			</select>
	
</mapper>